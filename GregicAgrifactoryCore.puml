@startuml
class io.thedogofchaos.GregicAgrifactoryCore.block.IronOreCrop {
+ {static} int MAX_AGE
+ {static} IntegerProperty AGE
+ <<Create>> IronOreCrop(Properties)
+ ItemLike getBaseSeedId()
+ IntegerProperty getAgeProperty()
+ int getMaxAge()
# void createBlockStateDefinition(StateDefinition.Builder<Block,BlockState>)
}
note left of io.thedogofchaos.GregicAgrifactoryCore.block.IronOreCrop::MAX_AGE
 This is one of a few tests to get a feel for making crops before I try to make a Builder class or add direct GregTech material compat.
end note


class io.thedogofchaos.GregicAgrifactoryCore.datagen.ItemModelJsonGenerator {
+ <<Create>> ItemModelJsonGenerator(PackOutput,ExistingFileHelper)
# void registerModels()
- ItemModelBuilder simpleItem(RegistryObject<Item>,String)
}
note left of io.thedogofchaos.GregicAgrifactoryCore.datagen.ItemModelJsonGenerator::simpleItem(RegistryObject<Item>,String)

     * Creates an item model.
     *
     * @param item The {@link RegistryObject} containing the {@link Item} to generate a model for.
     * @param path A {@link String} representing the path (after namespace/textures/item/) to the item texture's location
     * @return the created model object
     * @since 1.0.0
     
end note

class io.thedogofchaos.GregicAgrifactoryCore.datagen.LootTableJsonGenerator {
+ {static} net.minecraft.data.loot.LootTableProvider create(PackOutput)
}

class io.thedogofchaos.GregicAgrifactoryCore.datagen.DataGen {
+ {static} void gatherData(GatherDataEvent)
}

class io.thedogofchaos.GregicAgrifactoryCore.block.OreCrop {
- {static} int maxAge
- int color
- Crop crop
+ <<Create>> OreCrop(Crop)
+ boolean isBonemealSuccess(Level,RandomSource,BlockPos,BlockState)
# ItemLike getBaseSeedId()
# IntegerProperty getAgeProperty()
+ int compareTo(OreCrop)
}
note left of io.thedogofchaos.GregicAgrifactoryCore.block.OreCrop::maxAge
 leave this class as-is until I formulate a way to dynamically generate crops.
end note


class io.thedogofchaos.GregicAgrifactoryCore.GregicAgrifactoryCore {
+ {static} String MOD_ID
+ {static} Logger LOGGER
+ <<Create>> GregicAgrifactoryCore()
- void commonSetup(FMLCommonSetupEvent)
- void clientSetup(FMLClientSetupEvent)
}


class io.thedogofchaos.GregicAgrifactoryCore.registry.Registry {
- {static} DeferredRegister<Block> BLOCKS
- {static} DeferredRegister<Item> ITEMS
- {static} DeferredRegister<Block> CROP_BLOCKS
- {static} DeferredRegister<Item> CROP_ITEMS
+ {static} RegistryObject<Block> IRON_ORE_CROP
+ {static} RegistryObject<Item> IRON_ORE_SEEDS
- {static} RegistryObject<T> registerBlock(String,Supplier<T>)
- {static} RegistryObject<T> registerBlock(String,Supplier<T>,boolean)
- {static} RegistryObject<T> registerBlock(String,Supplier<T>,boolean,boolean)
- {static} RegistryObject<Item> registerBlockItem(String,RegistryObject<T>)
+ {static} void register(IEventBus)
}
note left of io.thedogofchaos.GregicAgrifactoryCore.registry.Registry::BLOCKS
 All the normal blocks and items go to the following two registers.
end note
note right of io.thedogofchaos.GregicAgrifactoryCore.registry.Registry::CROP_BLOCKS
 These two registers are only for Crops, their seeds, their harvested items, and their essences.
end note
note left of io.thedogofchaos.GregicAgrifactoryCore.registry.Registry::IRON_ORE_CROP
 Let's Define.
end note

note left of io.thedogofchaos.GregicAgrifactoryCore.registry.Registry::registerBlock(String,Supplier<T>)
 Helper Methods, with a side of overloading
end note
note right of io.thedogofchaos.GregicAgrifactoryCore.registry.Registry::register(IEventBus)
 Gotta register them all!
end note

class io.thedogofchaos.GregicAgrifactoryCore.crops.Crop {
- ResourceLocation id
- Component displayName
- int maxCropAge
- int flowerColor
- int essenceColor
- int seedColor
- Supplier<? extends CropBlock> crop
- Supplier<? extends Item> essence
- Supplier<? extends ItemNameBlockItem> seeds
- Supplier<? extends Block> crux
- boolean enabled
- <<Create>> Crop()
+ ItemLike getId()
}
note left of io.thedogofchaos.GregicAgrifactoryCore.crops.Crop::id
 leave this class as-is until I formulate a way to dynamically generate crops.
end note


class io.thedogofchaos.GregicAgrifactoryCore.crops.Crop$Builder {
+ <<Create>> Builder()
}

class io.thedogofchaos.GregicAgrifactoryCore.datagen.BlockStateJsonGenerator {
+ <<Create>> BlockStateJsonGenerator(PackOutput,ExistingFileHelper)
# void registerStatesAndModels()
+ void makeIronOreCrop(CropBlock,String,String,String)
- ConfiguredModel[] ironOreCropStates(BlockState,CropBlock,String,String,String)
}

class io.thedogofchaos.GregicAgrifactoryCore.datagen.loot.BlockLootTables {
+ <<Create>> BlockLootTables()
# void generate()
}



net.minecraft.world.level.block.CropBlock <|-- io.thedogofchaos.GregicAgrifactoryCore.block.IronOreCrop
net.minecraftforge.client.model.generators.ItemModelProvider <|-- io.thedogofchaos.GregicAgrifactoryCore.datagen.ItemModelJsonGenerator
io.thedogofchaos.GregicAgrifactoryCore.block.Comparable <|.. io.thedogofchaos.GregicAgrifactoryCore.block.OreCrop
net.minecraft.world.level.block.CropBlock <|-- io.thedogofchaos.GregicAgrifactoryCore.block.OreCrop
io.thedogofchaos.GregicAgrifactoryCore.crops.Crop +.. io.thedogofchaos.GregicAgrifactoryCore.crops.Crop$Builder
net.minecraftforge.client.model.generators.BlockStateProvider <|-- io.thedogofchaos.GregicAgrifactoryCore.datagen.BlockStateJsonGenerator
net.minecraft.data.loot.BlockLootSubProvider <|-- io.thedogofchaos.GregicAgrifactoryCore.datagen.loot.BlockLootTables
@enduml